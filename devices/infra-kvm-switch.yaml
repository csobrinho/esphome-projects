substitutions:
  name: infra-kvm-switch
  friendly_name: Infra KVM Switch
  area: IT Infrastructure
  project: ir.hdmi
  version: "1.0"
  ir_pin: GPIO10

api:
  encryption:
    key: !secret encryption_key
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

packages:
  base:
    url: https://github.com/csobrinho/esphome-projects/
    refresh: 1sec
    ref: main
    files: [base/esp32-c3-mini.yaml]

esphome:
  on_boot:
    priority: -100 # Run after everything is initialized
    then:
      - delay: 2s # Wait for system to stabilize
      - select.set:
          id: channel
          option: "1"

remote_transmitter:
  pin:
    number: ${ir_pin}
    inverted: True
    mode:
      output: True
      open_drain: True
  carrier_duty_percent: 100%

select:
  - platform: template
    name: "Channel"
    id: channel
    optimistic: true
    options: ["1", "2", "3", "4", "5", "6", "7", "8"]
    initial_option: "1"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return x == "1";'
            then:
              - remote_transmitter.transmit_nec:
                  address: 0xFE01
                  command: 0xE11E
        - if:
            condition:
              lambda: 'return x == "2";'
            then:
              - remote_transmitter.transmit_nec:
                  address: 0xFE01
                  command: 0xE31C
        - if:
            condition:
              lambda: 'return x == "3";'
            then:
              - remote_transmitter.transmit_nec:
                  address: 0xFE01
                  command: 0xFC03
        - if:
            condition:
              lambda: 'return x == "4";'
            then:
              - remote_transmitter.transmit_nec:
                  address: 0xFE01
                  command: 0xFF00
        - if:
            condition:
              lambda: 'return x == "5";'
            then:
              - remote_transmitter.transmit_nec:
                  address: 0xFE01
                  command: 0xF807
        - if:
            condition:
              lambda: 'return x == "6";'
            then:
              - remote_transmitter.transmit_nec:
                  address: 0xFE01
                  command: 0xFB04
        - if:
            condition:
              lambda: 'return x == "7";'
            then:
              - remote_transmitter.transmit_nec:
                  address: 0xFE01
                  command: 0xF40B
        - if:
            condition:
              lambda: 'return x == "8";'
            then:
              - remote_transmitter.transmit_nec:
                  address: 0xFE01
                  command: 0xF708

button:
  - platform: template
    name: "Power"
    on_press:
      remote_transmitter.transmit_nec:
        address: 0xFE01
        command: 0xE51A
  - platform: template
    name: "Channel 1"
    on_press:
      select.set:
        id: channel
        option: "1"
  - platform: template
    name: "Channel 2"
    on_press:
      select.set:
        id: channel
        option: "2"
  - platform: template
    name: "Channel 3"
    on_press:
      select.set:
        id: channel
        option: "3"
  - platform: template
    name: "Channel 4"
    on_press:
      select.set:
        id: channel
        option: "4"
  - platform: template
    name: "Channel 5"
    on_press:
      select.set:
        id: channel
        option: "5"
  - platform: template
    name: "Channel 6"
    on_press:
      select.set:
        id: channel
        option: "6"
  - platform: template
    name: "Channel 7"
    on_press:
      select.set:
        id: channel
        option: "7"
  - platform: template
    name: "Channel 8"
    on_press:
      select.set:
        id: channel
        option: "8"
  - platform: template
    name: "Forward"
    on_press:
      # remote_transmitter.transmit_nec:
      #   address: 0xFE01
      #   command: 0xFD02
      lambda: |-
        auto call = id(channel).make_call();
        std::string current = id(channel).state;
        int channel = atoi(current.c_str());
        if (channel < 8) {
          channel++;
        } else {
          channel = 1;
        }
        call.set_option(std::to_string(channel));
        call.perform();
  - platform: template
    name: "Backward"
    on_press:
      # remote_transmitter.transmit_nec:
      #   address: 0xFE01
      #   command: 0xF50A
      lambda: |-
        auto call = id(channel).make_call();
        std::string current = id(channel).state;
        int channel = atoi(current.c_str());
        if (channel > 1) {
          channel--;
        } else {
          channel = 8;
        }
        call.set_option(std::to_string(channel));
        call.perform();
